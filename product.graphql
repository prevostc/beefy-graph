
########################################################
# Products
########################################################

type ClassicVault {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: Lifecycle!
  shareToken: Token!
  underlyingToken: Token!
  underlyingProduct: PlatformProduct!

  rewardPool: RewardPool
}

type ClmManager {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: Lifecycle!
  shareToken: Token!
  underlyingTokens: [Token!]!
  underlyingProduct: PlatformProduct!

  vault: ClassicVault
  rewardPool: RewardPool
}

type RewardPool {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: Lifecycle!
  shareToken: Token!
  underlyingToken: Token!
  rewardTokens: [Token!]!
}

"""Mostly beS"""
type LstVault {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: Lifecycle!
  shareToken: Token!
  underlyingToken: Token!
}

type GovVault {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: Lifecycle!
  shareToken: Token!
  underlyingToken: Token!
}

union Product = ClassicVault | ClmManager | RewardPool | LstVault | GovVault


enum ProductType {
    CLASSIC_VAULT
    CLM_MANAGER
    REWARD_POOL
    LST_VAULT
    GOV_VAULT
}
input ProductFilter {
    chain: ChainFilter
    lifecycle: LifecycleType
    type: ProductType
    shareToken: TokenFilter
    underlyingToken: TokenFilter
}
enum ProductOrderBy {
    id
    chain
    status
}
type PaginatedProduct {
    pageInfo: PageInfo!
    items: [Product!]!
}
extend type Query {
    product(id: ID!): Product!
    products(where: ProductFilter = {}, orderBy: ProductOrderBy = id, orderDirection: OrderDirection = Asc, first: Int = 100, skip: Int = 0): PaginatedProduct!
}