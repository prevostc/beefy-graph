
########################################################
# Accounts 
########################################################

"""
An account is a unique address, regardless of the chain. 
It may be a contract or an externally owned account (EOA) or both (EOA with eip7702 code set).
"""
type Account {
  "${address}"
  id: ID!
  address: HexString!

  "True if the account ever interacted with the protocol"
  isUser: Boolean! 
  "True if the account has any open positions in the protocol"
  isInvestor: Boolean! 
  
  "This account may have one contract per chain"
  contracts: [Contract!]!
}

input AccountFilter {
    address_eq: HexString
}
enum AccountOrderBy {
    id
    address
}
type PaginatedAccount {
    pageInfo: PageInfo!
    items: [Account!]!
}

extend type Query {
    account(id: ID!): Account!
    accounts(where: AccountFilter = {}, orderBy: AccountOrderBy = id, orderDirection: OrderDirection = Asc, first: Int = 100, skip: Int = 0): PaginatedAccount!
}

########################################################
# Contracts
########################################################

type Contract {
  "${chain.id}:${address}"
  id: ID!
  chain: Chain!
  address: HexString!

  createdAtTimestamp: DateTime!
  createdAtBlock: Int!
}

input ContractFilter {
    chain: ChainFilter
    address_eq: HexString
}

enum ContractOrderBy {
    id
    chain
    address
}
type PaginatedContract {
    pageInfo: PageInfo!
    items: [Contract!]!
}

extend type Query {
    contract(id: ID!): Contract!
    contracts(where: ContractFilter = {}, orderBy: ContractOrderBy = id, orderDirection: OrderDirection = Asc, first: Int = 100, skip: Int = 0): PaginatedContract!
}