

enum ProductStatus {
    Active
    Eol
    Paused
}

type ProductLifecycle {
    status: ProductStatus!
    retireReason: String
    retiredAt: DateTime
    pauseReason: String
    pausedAt: DateTime
}

input ProductLifecycleFilter {
    status_eq: ProductStatus
}


########################################################
# Products
########################################################

type LegacyBoost {
  id: ID!

  slug: String!
  chain: Chain!
  name: String!

  vaultContract: Contract!
  strategyContract: Contract!

  underlyingProduct: Product!
}

type ClassicVault {
  id: ID!

  slug: String!
  chain: Chain!
  name: String!
  lifecycle: ProductLifecycle!

  vaultContract: Contract!
  strategyContract: Contract!

  shareToken: TokenErc20!
  underlyingToken: TokenErc20!
  underlyingProduct: PlatformProduct!

  rewardPool: RewardPool

  eolRewardPools: [RewardPool!]!
  eolLegacyBoosts: [LegacyBoost!]!
}

type ClmManager {
  id: ID!

  slug: String!
  chain: Chain!
  name: String!
  lifecycle: ProductLifecycle!

  vaultContract: Contract!
  strategyContract: Contract!

  shareToken: TokenErc20!
  underlyingTokens: [TokenErc20!]!
  underlyingProduct: PlatformProduct!

  vault: ClassicVault
  rewardPool: RewardPool

  eolRewardPools: [RewardPool!]!
  eolLegacyBoosts: [LegacyBoost!]!
}

type RewardPool {
  id: ID!

  slug: String!
  chain: Chain!
  name: String!
  lifecycle: ProductLifecycle!

  vaultContract: Contract!
  strategyContract: Contract!

  shareToken: TokenErc20!
  underlyingToken: TokenErc20!
  rewardTokens: [TokenErc20!]!
  underlyingProduct: PlatformProduct!
}

"""Mostly beS"""
type LstVault {
  id: ID!

  slug: String!
  chain: Chain!
  name: String!
  lifecycle: ProductLifecycle!
  
  vaultContract: Contract!
  strategyContract: Contract!

  shareToken: TokenErc20!
  underlyingToken: TokenErc20!
  underlyingProduct: PlatformProduct!
}

type GovVault {
  id: ID!
  chain: Chain!
  name: String!
  lifecycle: ProductLifecycle!

  vaultContract: Contract!
  strategyContract: Contract!

  shareToken: TokenErc20!
  underlyingToken: TokenErc20!

  underlyingProduct: PlatformProduct!
}




########################################################
# Bundles
########################################################

"""
A bundle is a collection of products that are related to each other.
"""
type ClmBundle {
    "${slug}"
    id: ID!
    slug: String!
    chain: Chain!

    clmManager: ClmManager!
    clmManagerRewardPool: RewardPool
    vault: ClassicVault
    vaultRewardPool: RewardPool

    eolLegacyBoosts: [LegacyBoost!]!
    eolVaultRewardPools: [RewardPool!]!
}

type GovBundle {
    "${slug}"
    id: ID!
    slug: String!
    chain: Chain!

    govVault: GovVault!
    compoundingVault: ClassicVault
}


union Product = ClassicVault | ClmManager | LstVault | GovVault | ClmBundle | GovBundle


enum ProductType {
    CLASSIC_VAULT
    CLM_MANAGER
    LST_VAULT
    GOV_VAULT
    CLM_BUNDLE
    GOV_BUNDLE
}

input ProductFilter {
    chain: ChainFilter
    lifecycle: ProductLifecycleFilter
    type: ProductType
    shareToken: TokenFilter
    underlyingToken: TokenFilter
}
enum ProductOrderBy {
    id
    chain
    status
}
type PaginatedProduct {
    pageInfo: PageInfo!
    items: [Product!]!
}
extend type Query {
    product(id: ID!): Product!
    products(where: ProductFilter = {}, orderBy: ProductOrderBy = id, orderDirection: OrderDirection = Asc, first: Int = 100, skip: Int = 0): PaginatedProduct!
}