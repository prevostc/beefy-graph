
########################################################
# Chains
########################################################

type Chain {
  id: ID!
  slug: String!
  name: String!
  networkId: Int!
}

input ChainFilter {
    id_eq: ID
    slug_eq: String
    name_eq: String
    networkId_eq: Int
}

extend type Query {
    chains(where: ChainFilter): [Chain!]!
}

########################################################
# Contracts
########################################################

type Contract {
  id: ID!
  chain: Chain!
  address: HexString!
  createdAtTimestamp: DateTime!
  createdAtBlock: Int!
}

########################################################
# Tokens
########################################################

type TokenNative {
  id: ID!
  chain: Chain!
  name: String!
  symbol: String!
  decimals: Int!
}
type TokenErc20 {
  id: ID!

  chain: Chain!
  contract: Contract!

  name: String!
  symbol: String!
  decimals: Int!
  underlyingTokens: [Token!]

}

union Token = TokenNative | TokenErc20

input TokenFilter {
    id_eq: ID
    chain: ChainFilter
    name_eq: String
    symbol_eq: String
    decimals_eq: Int
}
extend type Query {
    tokens(where: TokenFilter): [Token!]!
}

########################################################
# Products
########################################################


type ProductStatusActive {
    id: ID!
}
type ProductStatusEol {
    id: ID!
    retireReason: String!
    retiredAt: DateTime!
}
type ProductStatusPaused {
    id: ID!
    pauseReason: String!
    pausedAt: DateTime!
}
union ProductStatus = ProductStatusActive | ProductStatusEol | ProductStatusPaused

type ClassicVault {
  id: ID!
  chain: Chain!
  name: String!
  status: ProductStatus!
  shareToken: Token!
  underlyingToken: Token!

  rewardPool: RewardPool

  price: BigDecimal!
}

type ClmVault {
  id: ID!
  chain: Chain!
  name: String!
  status: ProductStatus!
  shareToken: Token!
  underlyingTokens: [Token!]!

  vault: ClassicVault
  rewardPool: RewardPool

  price: BigDecimal!
}


type RewardPool {
  id: ID!
  chain: Chain!
  name: String!
  status: ProductStatus!
  shareToken: Token!
  underlyingToken: Token!
  rewardTokens: [Token!]!

  price: BigDecimal!
}


type LiquidStakingVault {
  id: ID!
  chain: Chain!
  name: String!
  status: ProductStatus!
  shareToken: Token!
  underlyingToken: Token!

  price: BigDecimal!
}


type GovernanceVault {
  id: ID!
  chain: Chain!
  name: String!
  status: ProductStatus!
  shareToken: Token!
  underlyingToken: Token!

  price: BigDecimal!
}

union Product = ClassicVault | ClmVault | RewardPool | LiquidStakingVault | GovernanceVault

enum ProductStatusEnum {
    ACTIVE
    EOL
    PAUSED
}
input ProductStatusFilter {
    id_eq: ID
    status_eq: ProductStatusEnum!
}
input ProductFilter {
    chain: ChainFilter
    status: ProductStatusFilter
    shareToken: TokenFilter
    underlyingToken: TokenFilter
}

extend type Query {
    products(where: ProductFilter): [Product!]!
}
